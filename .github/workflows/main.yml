name: QT6 CI

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整提交历史（用于创建标签）

      - name: Install Qt6
        uses: jurplel/install-qt-action@v4.3.0
        with:
          version: 6.9.1
          host: windows
          target: desktop
          arch: win64_mingw
          modules: qtmultimedia
          tools: tools_mingw1310

      - name: Configure and Build
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -G "MinGW Makefiles" -DCMAKE_PREFIX_PATH="D:/a/SlayTheShrike/Qt/6.9.1/mingw_64" -DCMAKE_CXX_COMPILER="D:/a/SlayTheShrike/Qt/Tools/mingw1310_64/bin/g++.exe" ..
          cmake --build . -j

      - name: Get executable path
        id: exe-path
        run: |
          $exe = (Get-ChildItem -Path build -Recurse -Include *.exe | Select-Object -First 1).FullName
          echo "exe_path=$exe" >> $env:GITHUB_OUTPUT

      - name: Create timestamp
        id: timestamp
        run: echo "timestamp=$(Get-Date -Format 'yyyyMMdd_HHmmss')" >> $env:GITHUB_OUTPUT

      - name: Setup GitHub identity
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Delete previous release
        uses: actions/github-script@v6
        id: delete-release
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const ciRelease = releases.find(r => r.name.includes('CI Build'));
            if (ciRelease) {
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: ciRelease.id
              });
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${ciRelease.tag_name}`
              });
              return 'Deleted previous release';
            }
            return 'No previous release found';
          result-encoding: string

      - name: Create new release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ci-build-${{ steps.timestamp.outputs.timestamp }}
          name: "CI Build (${{ steps.timestamp.outputs.timestamp }})"
          body: "Automated build from GitHub Actions"
          files: ${{ steps.exe-path.outputs.exe_path }}
          prerelease: true
